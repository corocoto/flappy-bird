{"version":3,"sources":["containers/Menu/Scene/Scene.module.css","assets/images/bg.png","assets/images/bird.png","assets/images/fg.png","assets/images/pipeNorth.png","assets/images/pipeSouth.png","assets/sounds/fly.mp3","assets/sounds/score.mp3","helpers/createImage.ts","helpers/createAudio.ts","containers/Menu/Scene/constants.ts","containers/Menu/Scene/Scene.tsx"],"names":["createImage","url","Promise","resolve","reject","image","Image","addEventListener","error","setAttribute","src","createAudio","Audio","backgroundImage","birdImage","groundImage","topPipeImage","bottomPipeImage","flySound","scoreSound","CANVAS","BIRD","position","x","y","sceneImages","Map","Background","Bird","Ground","TopPipe","BottomPipe","sounds","FlySound","ScoreSound","SCORE_TEXT","score","BIRD_COPY","_cloneDeep","Scene","canvasRef","useRef","canvasContext","pipesCoordinate","requestID","loadSceneImages","a","get","setStarterValues","useCallback","current","width","renderer","drawImage","i","length","constant","height","Math","floor","random","window","cancelAnimationFrame","play","fillStyle","font","fillText","requestAnimationFrame","removeEventListeners","removeEventListener","keyDownPressHandler","useEffect","getContext","className","classes","ref"],"mappings":"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","file":"static/js/SceneComponent.9d80c1b0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Scene\":\"Scene_Scene__2ORqK\"};","export default __webpack_public_path__ + \"static/media/bg.093d36bb.png\";","export default __webpack_public_path__ + \"static/media/bird.71e31e9e.png\";","export default __webpack_public_path__ + \"static/media/fg.1aff9f5e.png\";","export default __webpack_public_path__ + \"static/media/pipeNorth.3e4cf42d.png\";","export default __webpack_public_path__ + \"static/media/pipeSouth.d354aa87.png\";","export default __webpack_public_path__ + \"static/media/fly.e734c795.mp3\";","export default __webpack_public_path__ + \"static/media/score.92d4be02.mp3\";","export function createImage(url: string): Promise<HTMLImageElement> {\n  return new Promise((resolve, reject) => {\n    const image = new Image();\n    image.addEventListener('load', () => resolve(image));\n    image.addEventListener('error', error => reject(error));\n    image.setAttribute('crossOrigin', 'anonymous');\n    image.src = url;\n  });\n}\n","export function createAudio(url: string): HTMLAudioElement {\n  return new Audio(url);\n}\n","import {CoordinatesType} from './Scene.types';\nimport Background from \"../../../assets/images/bg.png\";\nimport Bird from \"../../../assets/images/bird.png\";\nimport Ground from \"../../../assets/images/fg.png\";\nimport TopPipe from \"../../../assets/images/pipeNorth.png\";\nimport BottomPipe from \"../../../assets/images/pipeSouth.png\";\nimport FlySound from \"../../../assets/sounds/fly.mp3\";\nimport ScoreSound from \"../../../assets/sounds/score.mp3\";\nimport {createAudio, createImage} from \"../../../helpers\";\n\nexport const GAP_VALUE = 80;\nexport const GRAVITATION_VALUE = 1.7;\n\nexport const CANVAS = {\n  width: 288,\n  height: 512\n}\n\nexport const BIRD: { position: CoordinatesType } = {\n  position:  {\n    x: 10,\n    y: 150\n  }\n};\n\nexport const PIPE_X_ENDPOINT = 125;\nexport const PIPE_X_UPPER_SCORE = 5;\n\nexport const sceneImages = new Map([\n  [\n    'background',\n    createImage(Background)\n  ],\n  [\n    'bird',\n    createImage(Bird)\n  ],\n  [\n    'ground',\n    createImage(Ground)\n  ],\n  [\n    'topPipe',\n    createImage(TopPipe)\n  ],\n  [\n    'bottomPipe',\n    createImage(BottomPipe)\n  ]\n]);\n\nexport const sounds = new Map([\n  [\n    'fly',\n    createAudio(FlySound)\n  ],\n  [\n    'score', createAudio(ScoreSound)\n  ]\n]);\n\nexport const SCORE_TEXT = {\n  fill: '#000',\n  font: '16px Century Gothic',\n  text: (score: number) => `Score: ${score}`\n}\n","import React, {useEffect, useRef, useCallback} from 'react';\nimport classes from './Scene.module.css';\nimport _cloneDeep from 'lodash/cloneDeep';\n\nimport {\n  sounds,\n  sceneImages,\n  GAP_VALUE,\n  GRAVITATION_VALUE,\n  BIRD,\n  PIPE_X_ENDPOINT,\n  CANVAS,\n  PIPE_X_UPPER_SCORE,\n  SCORE_TEXT\n} from './constants';\nimport {CoordinatesType} from './Scene.types';\n\nconst BIRD_COPY = _cloneDeep(BIRD);\n\nlet backgroundImage: HTMLImageElement;\nlet birdImage: HTMLImageElement;\nlet groundImage: HTMLImageElement;\nlet topPipeImage: HTMLImageElement;\nlet bottomPipeImage: HTMLImageElement;\nlet flySound: HTMLAudioElement;\nlet scoreSound: HTMLAudioElement\n\nconst Scene = () => {\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const canvasContext = useRef<CanvasRenderingContext2D>();\n    const pipesCoordinate = useRef<CoordinatesType[]>([]);\n\n    const score = useRef<number>(0);\n    const requestID = useRef<number>(0);\n\n    const loadSceneImages = async () => {\n      backgroundImage = await sceneImages.get('background') as HTMLImageElement;\n      birdImage = await sceneImages.get('bird') as HTMLImageElement;\n      groundImage = await sceneImages.get('ground') as HTMLImageElement;\n      topPipeImage = await sceneImages.get('topPipe') as HTMLImageElement;\n      bottomPipeImage = await sceneImages.get('bottomPipe') as HTMLImageElement;\n    };\n\n    const loadSceneSounds = () => {\n      flySound = sounds.get('fly') as HTMLAudioElement;\n      scoreSound = sounds.get('score') as HTMLAudioElement;\n    }\n\n    const initCanvasContext = () => {\n      if (canvasRef.current) {\n        canvasContext.current = canvasRef.current.getContext('2d') as CanvasRenderingContext2D;\n      }\n    };\n\n  const setStarterValues = useCallback(() => {\n    BIRD_COPY.position = {\n      ...BIRD.position\n    };\n\n    score.current = 0;\n\n    pipesCoordinate.current = [\n      {\n        x: canvasRef.current?.width as number,\n        y: 0,\n      }\n    ];\n  }, []);\n\n  const renderer = useCallback(() => {\n    if (!canvasContext.current || !canvasRef.current) return;\n    canvasContext.current.drawImage(\n      backgroundImage,\n      0,\n      0\n    );\n    for (let i = 0; i < pipesCoordinate.current.length; i++) {\n      const constant = topPipeImage.height + GAP_VALUE;\n\n      /* Draw top pipe */\n      canvasContext.current.drawImage(\n        topPipeImage,\n        pipesCoordinate.current[i].x,\n        pipesCoordinate.current[i].y\n      );\n\n      /* Draw bottom pipe */\n      canvasContext.current.drawImage(\n        bottomPipeImage,\n        pipesCoordinate.current[i].x,\n        pipesCoordinate.current[i].y + constant\n      );\n\n      /* Move pipes */\n      pipesCoordinate.current[i].x--;\n\n      /* Add new pipes */\n      if (pipesCoordinate.current[i].x === PIPE_X_ENDPOINT) {\n        pipesCoordinate.current = [\n          ...pipesCoordinate.current,\n          {\n            x: canvasRef.current.width,\n            y: Math.floor(Math.random() * topPipeImage.height) - topPipeImage.height,\n          }\n        ];\n      }\n\n      /* Bit about pipes */\n      if (\n        (\n          BIRD_COPY.position.x + birdImage.width >= pipesCoordinate.current[i].x &&\n          BIRD_COPY.position.x <= pipesCoordinate.current[i].x + topPipeImage.width &&\n          (\n            BIRD_COPY.position.y <= pipesCoordinate.current[i].y + topPipeImage.height ||\n            BIRD_COPY.position.y + birdImage.height >= pipesCoordinate.current[i].y + constant\n          )\n        ) ||\n        BIRD_COPY.position.y + birdImage.height >= canvasRef.current.height - groundImage.height\n      ) {\n          window.cancelAnimationFrame(requestID.current);\n        setStarterValues();\n        renderer();\n        // eslint-disable-next-line no-throw-literal\n        throw 'End of the game';\n      }\n\n      /* Change score */\n      if (pipesCoordinate.current[i].x === PIPE_X_UPPER_SCORE) {\n        score.current++;\n        scoreSound.play();\n      }\n    }\n\n    /* Draw ground */\n    canvasContext.current.drawImage(\n      groundImage,\n      0,\n      canvasRef.current.height - groundImage.height\n    );\n\n    /* Draw bird */\n    canvasContext.current.drawImage(\n      birdImage,\n      BIRD_COPY.position.x,\n      BIRD_COPY.position.y\n    );\n\n    BIRD_COPY.position.y += GRAVITATION_VALUE;\n\n    /* Draw score */\n    canvasContext.current.fillStyle = SCORE_TEXT.fill;\n    canvasContext.current.font = SCORE_TEXT.font;\n    canvasContext.current.fillText(\n      SCORE_TEXT.text(score.current),\n      10,\n      canvasRef.current.height - 20\n    );\n    requestID.current = window.requestAnimationFrame(renderer);\n  }, [setStarterValues]);\n\n  const removeEventListeners = useCallback(() => {\n    window.removeEventListener('keydown', keyDownPressHandler);\n    canvasRef.current?.removeEventListener('touchstart', keyDownPressHandler);\n      window.cancelAnimationFrame(requestID.current);\n  }, [requestID]);\n\n  const keyDownPressHandler = () => {\n    BIRD_COPY.position.y -= 30;\n    flySound.play();\n  }\n\n  useEffect(() => {\n    initCanvasContext();\n    setStarterValues();\n    loadSceneSounds();\n    (async() => {\n      await loadSceneImages();\n      renderer();\n      window.addEventListener('keydown', keyDownPressHandler);\n      canvasRef.current?.addEventListener('touchstart', keyDownPressHandler)\n    })();\n\n      return () => {\n        removeEventListeners();\n      };\n    }, [removeEventListeners, renderer, setStarterValues]);\n\n    return (\n      <canvas\n        className={classes.Scene}\n        ref={canvasRef}\n        width={CANVAS.width}\n        height={CANVAS.height}\n      />\n    );\n};\n\nexport default Scene;\n"],"sourceRoot":""}