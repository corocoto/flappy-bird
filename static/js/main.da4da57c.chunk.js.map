{"version":3,"sources":["containers/Menu/Menu.module.css","containers/Menu/List/List.module.css","containers/Menu/List/List.tsx","containers/Menu/Menu.tsx","assets/images/logo.png","components/Poster/Poster.module.css","components/Poster/Poster.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["List","className","classes","to","Scene","React","lazy","About","withRouter","history","routes","path","component","isBackButtonHidden","includes","location","pathname","fallbackNode","onClick","goBack","hidden","fallback","href","target","rel","title","Poster","src","Logo","alt","loading","App","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","rootElement","document","getElementById","createRoot","render","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.da4da57c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Menu\":\"Menu_Menu__3dUGj\",\"Links\":\"Menu_Links__3wBOT\",\"License\":\"Menu_License__1-MSG\",\"Repo\":\"Menu_Repo__2RXjW\"};","// extracted by mini-css-extract-plugin\nexport default {\"List\":\"List_List__1c9rg\"};","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport classes from './List.module.css';\n\nconst List = () => (\n  <div className={classes.List}>\n    <button>\n      <NavLink to='/game'>Play</NavLink>\n    </button>\n    <button>\n      <NavLink to='/author'>Author</NavLink>\n    </button>\n  </div>\n);\n\nexport default List;\n","import React, {Suspense} from 'react';\nimport classes from './Menu.module.css';\nimport {Route, Switch} from 'react-router-dom';\nimport {withRouter} from 'react-router-dom';\nimport List from './List';\nimport {MenuType} from './Menu.types';\n\nconst Scene = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"SceneComponent\" */\n    /* webpackPreload: true */\n    './Scene'\n    )\n);\nconst About = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"AboutComponent\" */\n    /* webpackPrefetch: true */\n    './About'\n    )\n);\n\n\nconst Menu: MenuType = ({history}) => {\n  const routes = (<Switch>\n    <Route path='/game' component={Scene}/>\n    <Route path='/author' component={About}/>\n    <Route path='/' component={List}/>\n  </Switch>);\n\n  const handleBackButtonClick = (): void => history.goBack();\n\n  const isBackButtonHidden = ['/', '/flappy-bird', '/flappy-bird/'].includes(history.location.pathname);\n\n  const fallbackNode = <p>Loading...</p>;\n\n  return (\n    <div className={classes.Menu}>\n      <button\n        onClick={handleBackButtonClick}\n        hidden={isBackButtonHidden}\n      >\n        Back\n      </button>\n      <Suspense fallback={fallbackNode}>{routes}</Suspense>\n      <div className={classes.Links}>\n        <a\n          href='https://github.com/corocoto/flappy-bird/blob/master/LICENSE'\n          target='_blank'\n          className={classes.License}\n          rel='noopener noreferrer license'\n          title='Link on the licence'\n        > </a>\n        <a\n          href='https://github.com/corocoto/flappy-bird'\n          target='_blank'\n          className={classes.Repo}\n          rel='noopener noreferrer bookmark'\n          title='Link on the repository'\n        > </a>\n      </div>\n    </div>\n  )\n}\nexport {Menu};\nexport default withRouter(Menu);\n","export default __webpack_public_path__ + \"static/media/logo.861ba8ea.png\";","// extracted by mini-css-extract-plugin\nexport default {\"Poster\":\"Poster_Poster__CYb5V\"};","import React from 'react';\nimport Logo from '../../assets/images/logo.png';\nimport classes from './Poster.module.css';\n\nconst Poster = () => {\n  return (\n    <div className={classes.Poster}>\n      <img src={Logo} alt=\"Logo\" loading=\"lazy\"/>\n    </div>\n  );\n};\n\nexport default Poster;\n","import React from 'react';\nimport {BrowserRouter} from 'react-router-dom';\nimport './App.css';\nimport Menu from './containers/Menu';\nimport Poster from './components/Poster';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Poster/>\n        <Menu/>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React  from 'react';\nimport { createRoot } from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.getElementById('root') as Element;\nconst root = createRoot(rootElement);\nroot.render(<App />);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}